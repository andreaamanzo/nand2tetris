function Math.init 1
push constant 16
pop static 0
push static 0
call Array.new 1
pop static 1
push static 1
push constant 0
push constant 1
pop temp 0
add
pop pointer 1
push temp 0
pop that 0
push constant 1
pop local 0
label Math_0
push local 0
push static 0
lt
not
if-goto Math_1
push static 1
push local 0
push static 1
push local 0
push constant 1
sub
add
pop pointer 1
push that 0
push static 1
push local 0
push constant 1
sub
add
pop pointer 1
push that 0
add
pop temp 0
add
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto Math_0
label Math_1
push constant 0
return
function Math.multiply 4
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
or
push argument 0
push constant 0
gt
push argument 1
push constant 0
gt
or
and
pop local 3
push argument 0
call Math.abs 1
pop argument 0
push argument 1
call Math.abs 1
pop argument 1
push constant 0
pop local 0
push argument 0
pop local 1
push constant 0
pop local 2
label Math_2
push local 2
push static 0
lt
not
if-goto Math_3
push argument 1
push static 1
push local 2
add
pop pointer 1
push that 0
and
push constant 0
gt
not
if-goto Math_4
push local 0
push local 1
add
pop local 0
goto Math_5
label Math_4
label Math_5
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto Math_2
label Math_3
push local 3
not
if-goto Math_6
push local 0
neg
return
goto Math_7
label Math_6
label Math_7
push local 0
return
function Math.divide 3
push argument 1
push constant 0
eq
not
if-goto Math_8
push constant 3
call Sys.error 1
pop temp 0
push constant 0
return
goto Math_9
label Math_8
label Math_9
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
or
push argument 0
push constant 0
gt
push argument 1
push constant 0
gt
or
and
pop local 0
push argument 0
call Math.abs 1
pop argument 0
push argument 1
call Math.abs 1
pop argument 1
push argument 1
push argument 0
gt
not
if-goto Math_10
push argument 0
pop static 2
push constant 0
return
goto Math_11
label Math_10
label Math_11
push argument 1
push argument 1
add
push constant 0
lt
not
if-goto Math_12
push constant 0
pop local 1
push argument 0
pop static 2
goto Math_13
label Math_12
push argument 0
push argument 1
push argument 1
add
call Math.divide 2
pop local 1
label Math_13
push static 2
push argument 1
lt
not
if-goto Math_14
push local 1
push local 1
add
pop local 2
goto Math_15
label Math_14
push local 1
push local 1
add
push constant 1
add
pop local 2
push static 2
push argument 1
sub
pop static 2
label Math_15
push local 0
not
if-goto Math_16
push local 2
neg
return
goto Math_17
label Math_16
label Math_17
push local 2
return
function Math.sqrt 3
push argument 0
push constant 0
lt
not
if-goto Math_18
push constant 4
call Sys.error 1
pop temp 0
push constant 0
return
goto Math_19
label Math_18
label Math_19
push constant 0
pop local 0
push static 0
push constant 2
call Math.divide 2
push constant 1
sub
pop local 1
label Math_20
push local 1
push constant 1
neg
gt
not
if-goto Math_21
push local 0
push static 1
push local 1
add
pop pointer 1
push that 0
add
push local 0
push static 1
push local 1
add
pop pointer 1
push that 0
add
call Math.multiply 2
pop local 2
push local 2
push argument 0
gt
not
push local 2
push constant 0
gt
and
not
if-goto Math_22
push local 0
push static 1
push local 1
add
pop pointer 1
push that 0
add
pop local 0
goto Math_23
label Math_22
label Math_23
push local 1
push constant 1
sub
pop local 1
goto Math_20
label Math_21
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
not
if-goto Math_24
push argument 0
return
goto Math_25
label Math_24
label Math_25
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
not
if-goto Math_26
push argument 0
return
goto Math_27
label Math_26
label Math_27
push argument 1
return
function Math.abs 0
push argument 0
push constant 0
lt
not
if-goto Math_28
push argument 0
neg
return
goto Math_29
label Math_28
label Math_29
push argument 0
return
function Math.mod 2
push argument 0
push argument 1
call Math.divide 2
pop local 0
push argument 0
push argument 1
push local 0
call Math.multiply 2
sub
pop local 1
push local 1
return
