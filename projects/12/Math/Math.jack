// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
  static int n;             // Number of bits used for representing a two's complement integer
  static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)
  static int divisionRem;   // Stores (x - (2*q*y))

  // Initializes the Math library.
  function void init() {
    var int i;

    let n = 16;
    let powersOfTwo = Array.new(n);
    let powersOfTwo[0] = 1;

    let i = 1;
    while (i < n) {
      let powersOfTwo[i] = powersOfTwo[i-1] + powersOfTwo[i-1];
      let i = i+1;
    }

    return;
  }

  /** Returns the product of x and y. 
   *  When a Jack compiler detects the multiplication operator '*'
   *  in an expression, it handles it by invoking this method. 
   *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
  function int multiply(int x, int y) {
    var int sum;
    var int shiftedX;
    var int i;
    var boolean neg;

    let neg = ((x < 0) | (y < 0)) & ((x > 0) | (y > 0)); // xor
    let x = Math.abs(x);
    let y = Math.abs(y);

    let sum = 0;
    let shiftedX = x;
    let i = 0;

    while (i < n) {
      if ((y & powersOfTwo[i]) > 0) { // if j-th bit of y == 1
        let sum = sum + shiftedX;
      }
      
      let shiftedX = shiftedX + shiftedX;
      let i = i + 1;
    }

    if (neg) { return -sum; }
    return sum;
  }

  /** Returns the integer part of x / y.
   *  When a Jack compiler detects the division operator '/'
   *  an an expression, it handles it by invoking this method.
   *  Thus, x/y and Math.divide(x,y) return the same value. */
  function int divide(int x, int y) {
    var boolean neg;
    var int q, result;

    if (y = 0) { 
      do Sys.error(3); 
      return 0;
    }
    let neg = ((x < 0) | (y < 0)) & ((x > 0) | (y > 0)); // (x < 0) xor (y < 0)
    let x = Math.abs(x);
    let y = Math.abs(y);

    if (y > x) { 
      let divisionRem = x;
      return 0; 
    }

    if ((y + y) < 0) { // overflow
      let q = 0;
      let divisionRem = x;
    } else {
      let q = Math.divide(x, y + y); // divide(x, 2 * y)
    }

    if (divisionRem < y) { 
      let result =  q + q; // 2 * q 
    } else { 
      let result = (q + q) + 1; // (2 * q) + 1 
      let divisionRem = divisionRem - y;
    }

    if (neg) { return -result; }
    return result;
  }

  /** Returns the integer part of the square root of x. */
  function int sqrt(int x) {
    var int y, j, calc;

    if (x < 0) { 
      do Sys.error(4); 
      return 0;
    }

    let y = 0;
    let j = (n/2)-1;

    while(j > -1) {
      let calc = (y + powersOfTwo[j]) * (y + powersOfTwo[j]); // (y + 2^j)^2
      if (~(calc > x) & (calc > 0)) { // calc <= x && calc > 0
        let y = y + powersOfTwo[j];
      }
      let j = j-1;
    }
    
    return y;
  }

  /** Returns the greater value. */
  function int max(int a, int b) {
    if (a > b) { return a; }

    return b;
  }

  /** Returns the smaller value. */
  function int min(int a, int b) {
    if (a < b) { return a; }

    return b;
  }

  /** Returns the absolute value of x. */
  function int abs(int x) {
    if (x < 0) { return -x; }
    
    return x;
  }

  /** returns a % b */
  function int mod(int a, int b) {
    var int d, r;

    let d = Math.divide(a,b);
    let r = a - (b * d);
    
    return r;
  }
}
