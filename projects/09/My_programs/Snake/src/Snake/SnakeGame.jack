class SnakeGame {
  field Snake snake;
  field Piece apple;
  field LCGRandom random;
  field int direction;
  field int pieceSize;
  field int nPieces;
  field int score;
  field String scoreString;
  field String gameOverString;
  field String restartString;


  constructor SnakeGame new() {
    let pieceSize = 10;
    let nPieces = 10;
    let direction = 1;
    let score = 0;
    let scoreString = "Score: ";
    let gameOverString = "Game Over";
    let restartString = "Press R to restart";
    let snake = Snake.new(pieceSize, nPieces);
    let apple = Piece.new(pieceSize, pieceSize*5, pieceSize*8);
    let random = LCGRandom.new(1);

    return this;
  }

  /* Disposes this game. */
  method void dispose() {
    do snake.dispose();
    do apple.dispose();
    do random.dispose();
    do Memory.deAlloc(this);

    return;
  }

  method void resetGame() {
    let direction = 1;
    let score = 0;
    do Screen.clearScreen();
    do snake.reset(nPieces);
    do spawnApple();

    return;
  }

  method void drawGrid() {
    var int x_pos, y_pos;

    let x_pos = 0;
    while (x_pos < 511) {
      do Screen.drawLine(x_pos, 0, x_pos, pieceSize*(255/pieceSize));
      let x_pos = x_pos + pieceSize;
    }

    let y_pos = 0;
    while (y_pos < 255) {
      do Screen.drawLine(0, y_pos, pieceSize*(511/pieceSize), y_pos);
      let y_pos = y_pos + pieceSize;
    }

    return;
  }

  method void spawnApple() {
    var int new_x, new_y;

    let new_x = (random.randRange(0, (511/pieceSize) - 1)) * pieceSize;
    let new_y = (random.randRange(0, (255/pieceSize) - 1)) * pieceSize;
    do apple.setX(new_x);
    do apple.setY(new_y);

    while (snake.checkHit(apple)) {
      let new_x = (random.randRange(0, (511/pieceSize) - 1)) * pieceSize;
      let new_y = (random.randRange(0, (255/pieceSize) - 1)) * pieceSize;
      do apple.setX(new_x);
      do apple.setY(new_y);
    }

    return;
  }

  method void run() {
    var char key;  
    var boolean exit, gameOver;
    var Piece head;

    let exit = false;
    let gameOver = false;
    let key = 0;

    
    while (~exit) {
      // waits for a key to be pressed
      let key = Keyboard.keyPressed();

      if ((key = 113) | (key = 82))   { let exit = true; }            // q key
      if ((key = 114) | (key = 83))   { do resetGame(); 
                                        let gameOver = false; }      // r key
      if ((key = 132) & (~(direction = 2))) { let direction = 1; }   // right arrow
      if ((key = 130) & (~(direction = 1))) { let direction = 2; }   // left arrow
      if ((key = 131) & (~(direction = 4))) { let direction = 3; }   // up arrow
      if ((key = 133) & (~(direction = 3))) { let direction = 4; }   // down arrow

      if (~gameOver) {
        do Screen.clearScreen();
        do drawGrid();
        do snake.draw();

        do apple.draw();

        do Output.moveCursor(0, 52);
        do Output.printString(scoreString);
        do Output.printInt(score);

        if (~(snake.move(direction))) { 
          let gameOver = true; 
          do Output.moveCursor(10,27);
          do Output.printString(gameOverString);
          do Output.moveCursor(13,23);
          do Output.printString(restartString);
        } 

        let head = snake.getHead();
        // the snake ate the apple
        if ((head.getX() = apple.getX()) & (head.getY() = apple.getY())) {
          do snake.eatApple();
          do spawnApple();
          let score = score + 1;
        }
      }

      do Sys.wait(50);  // delays the next movement
    } // while

    return;
  }
}