// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Not(in=instruction[15], out=aInstr);
    Or(a=aInstr, b=instruction[5], out=loadARegister);
    And(a=instruction[15], b=instruction[4], out=loadDRegister);
    And(a=instruction[15], b=instruction[3], out=writeM);
	
    Mux16(a=aluOut, b=instruction, sel=aInstr, out=inARegister);

    ARegister(in=inARegister, load=loadARegister, out=outARegister, out = addressM);
    DRegister(in=aluOut, load=loadDRegister, out=outDRegister);
    

    Mux16(a=outARegister, b=inM, sel=instruction[12], out=inBAlu);

    ALU(x=outDRegister, y=inBAlu, 
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        out=aluOut, out=outM, 
        zr=isZero, ng=isNegative);
    
    Not(in=isNegative, out=a1);
    Not(in=isZero, out=a2);
    And(a=a1, b=a2, out=isPositive);

    And(a=isNegative, b=instruction[2], out=setNegative);
    And(a=isZero, b=instruction[1], out=setZero);
    And(a=isPositive, b=instruction[0], out=setPositive);
    
    Or(a=setNegative, b=setZero, out=temp);
    Or(a=temp, b=setPositive, out=jumpCond);
    And(a=jumpCond, b=instruction[15], out=loadPC);

    PC(in=outARegister, load=loadPC, inc=true, reset=reset, out=pc);
    
    
    
    
    
    
    
    

    
    
    
    
}